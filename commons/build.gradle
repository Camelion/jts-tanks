/*
 * Copyright 2014 jts
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'idea'

sourceCompatibility = 1.7
version = '1.0'
compileJava.options.encoding = 'UTF-8'

sourceSets {
	generated {
		java {
			srcDirs = ['src/generated/java']
		}
	}
}
repositories {
	mavenCentral()
}

configurations {
	querydslapt
}

dependencies {
	testRuntime 'org.hsqldb:hsqldb:+'
	compile 'junit:junit:+'

	compile 'org.slf4j:slf4j-api:+'
	compile 'org.slf4j:slf4j-log4j12:+'
	compile 'log4j:log4j:+'
	compile 'dom4j:dom4j:1.6.1'
	compile 'com.fasterxml.jackson.core:jackson-core:+'
	compile 'com.fasterxml.jackson.core:jackson-databind:+'

	compile 'io.netty:netty-all:4.0.+'

	compile 'mysql:mysql-connector-java:+'

	compile 'org.hibernate:hibernate-core:4.+'
	compile 'org.hibernate:hibernate-entitymanager:4.+'

	compile('com.mysema.querydsl:querydsl-core:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }
	compile('com.mysema.querydsl:querydsl-jpa:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }
	compile('com.mysema.querydsl:querydsl-sql:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }

	querydslapt 'com.mysema.querydsl:querydsl-apt:3.3.0'

	compile fileTree(dir: 'lib', include: '*.jar')
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.querydslapt
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
	]
	options.encoding = 'UTF-8'
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

processResources.doFirst({
	delete sourceSets.main.output.resourcesDir
})

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}

compileGeneratedJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

processTestResources.doLast({
	copy {
		from sourceSets.main.output.classesDir
		into sourceSets.main.output.resourcesDir
	}
})

clean {
	delete sourceSets.generated.java.srcDirs
}

idea {
	module {
		sourceDirs += file('src/generated/java')
	}
}