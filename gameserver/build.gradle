/*
 * Copyright 2014 jts
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'idea'
apply plugin: 'distribution'

sourceCompatibility = 1.7
version = '1.0'
compileJava.options.encoding = 'UTF-8'
jar.dependsOn(test)

sourceSets {
	generated {
		java {
			srcDirs = ['src/generated/java']
		}
	}
}
repositories {
	mavenCentral()
}

configurations {
	querydslapt
}

dependencies {
	testCompile 'junit:junit:+'

	compile project(":commons")

	compile 'org.slf4j:slf4j-api:1.7.5'

	compile 'org.bouncycastle:bcprov-jdk16:1.46'

	compile 'mysql:mysql-connector-java:5.1.27'

	compile 'org.hibernate:hibernate-core:4.3.0.Final'
	compile 'org.hibernate:hibernate-entitymanager:4.3.0.Final'

	compile('com.mysema.querydsl:querydsl-core:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }
	compile('com.mysema.querydsl:querydsl-jpa:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }
	compile('com.mysema.querydsl:querydsl-sql:3.3.0') { exclude module: 'hibernate-jpa-2.0-api' }

	querydslapt 'com.mysema.querydsl:querydsl-apt:3.3.0'

	compile fileTree(dir: 'lib', include: '*.jar')
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
	source = sourceSets.main.java
	classpath = configurations.compile + configurations.querydslapt
	options.compilerArgs = [
			"-proc:only",
			"-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
	]
	options.encoding = 'UTF-8'
	destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
	dependsOn generateQueryDSL
	source generateQueryDSL.destinationDir
}

compileGeneratedJava {
	dependsOn generateQueryDSL
	options.warnings = false
	classpath += sourceSets.main.runtimeClasspath
}

task copyDist(type: Copy) {
	destinationDir = file("$buildDir/prepared-dist")
	into('config/default') {
		from 'dist/config/default/'
	}
	into('config') {
		from 'dist/config/default/'
	}
	from ('dist') { include 'start.bat'}
	into('lib') {
		from configurations.runtime
		from jar.outputs.files
	}
}

copyDist.dependsOn(jar)

distZip.dependsOn(copyDist)

distributions {
	main {
		baseName = 'game-server'
		contents {
			from copyDist
		}
	}
}

clean {
	delete sourceSets.generated.java.srcDirs
}

idea {
	module {
		sourceDirs += file('src/generated/java')
	}
}